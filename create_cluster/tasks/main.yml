---
# tasks file for create_cluster
  
# TODO: use the variable for cluster_network_host_prefix
- name: create cluster
  block:
  - name: Create Cluster
    sonofspike.ocm.create_cluster_test:
      name: "{{ CLUSTER_NAME }}"
      url_assisted_installer: "{{ ASSISTED_INSTALLER_BASE_URL }}"
      access_token: "{{ access_token }}"
      openshift_version: "{{ OPENSHIFT_VERSION }}"
      base_dns_domain: "{{ BASE_DNS_DOMAIN }}"
      cluster_network_cidr: "{{ CLUSTER_NETWORK_CIDR }}"
      cluster_network_host_prefix: 23
      high_availability_mode: "None"
      service_network_cidr: "{{ SERVICE_NETWORK_CIDR }}"
      pull_secret: "{{ PULL_SECRET | to_json }}"
      ssh_public_key: "{{ SSH_PUBLIC_KEY }}"
      vip_dhcp_allocation: "{{ VIP_DHCP_ALLOCATION | lower | bool }}"
      http_proxy: "{{ HTTP_PROXY }}"
      https_proxy: "{{ HTTPS_PROXY }}"
      no_proxy: "{{ NO_PROXY }}"
      ntp_source: "{{ NTP_SERVER }}"
      

        

- debug:
    var: http_reply.json
#when: debug and create  | bool == True

- name: Set the cluster ID
  set_fact:
    cluster_id: "{{ http_reply.json.id }}"
  when: create | bool == True

- name: "Save cluster_id"
  copy:
    content: "{{ cluster_id }}"
    dest: cluster.txt
  delegate_to: localhost
  become: no
  when: create | bool == True

## For Infra-env ID to be generated. ISO will not be downloaded
- import_role:
    name: generate_discovery_iso
  vars:
    download: False

##### TO REMOVE ####
- name: Get discovery ignition file
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}/discovery-ignition"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200]
    return_content: True
  register: discovery_ignition

- debug:
    var: discovery_ignition.json
  when: debug | bool == True

- name: "Copy discovery_ignition cluster_id"
  copy:
    content: "{{ discovery_ignition.json }}"
    dest: discovery-ignition-before.txt
  delegate_to: localhost
  become: no

##### TO REMOVE ####

- name: Get discovery ignition file
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}/discovery-ignition"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200]
    return_content: True
  register: discovery_ignition

- debug:
    var: discovery_ignition.json
  when: debug | bool == True

- name: "Copy discovery_ignition.json"
  copy:
    content: "{{ discovery_ignition.json }}"
    dest: discovery-ignition.txt
  delegate_to: localhost
  become: no

#### patch cluster install config on restricted network environments ###

- name: Get install-config file
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}/install-config"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200]
    return_content: True
  register: install_config

- debug:
    var: install_config.json
  when: debug | bool == True

- name: "Copy install_config"
  copy:
    content: "{{ install_config.json }}"
    dest: install-config.txt
  delegate_to: localhost
  become: no

- name: Load patch for install config
  set_fact:
    patch_install_config: "{{ lookup('template', 'patch-install-config.j2') | from_yaml }}"
  when: disconnected | bool == True

- name: Add network_type to patch_install_config
  set_fact:
    patch_install_config: "{{ lookup('template', 'patch-network-type.j2') | from_yaml | combine(patch_install_config | default({}))  }}"
  when: network_type is defined

- debug:
    var: patch_install_config
  when: debug and disconnected  | bool == True

- name: Patch install config
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}/install-config"
    method: PATCH
    headers: 
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [201]
    return_content: True
    body_format: json
    body: "{{ patch_install_config | to_json(ensure_ascii=False) | string | to_json(ensure_ascii=False) | string }}"
  when: disconnected | bool == True
  register: http_reply

- debug:
    var: http_reply
  when: debug and disconnected  | bool == True

- name: Get install-config file
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}/install-config"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200]
    return_content: True
  register: install_config

- debug:
    var: install_config.json
  when: debug | bool == True

- name: "Copy install_config-json to patched-config.txt"
  copy:
    content: "{{ install_config.json }}"
    dest: patched-config.txt
  delegate_to: localhost
  become: no

#TODO: Apply manifests before cluster installation

- name: Apply manifests before cluster installation
  include_tasks: manifest.yml
  with_items:
    - 50-worker-nm-fix-ipv6.yml
    - 50-worker-remove-ipi-leftovers.yml
    - 02-fix-ingress-config.yml
    - 01-master-node-scheduler.yml
  when: manifests  | bool == True

- name: Apply manifests before cluster installation
  include_tasks: manifest.yml
  with_items:
    - 50-worker-nm-fix-ipv6.yml
    - 50-worker-remove-ipi-leftovers.yml
    - 02-fix-ingress-config.yml
    - 01-master-node-scheduler.yml
  when: manifests  | bool == True


# Patch the cluster with the API Virtual IP
- name: Patch cluster with Machine Network CIDR
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}/{{ cluster_id }}"
    method: PATCH
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [201]
    return_content: True
    body_format: json
    body: {
          "machine_network_cidr": "{{ MACHINE_NETWORK_CIDR }}"
    }
  when: 
    - sno | bool == True 
      
  register: http_reply